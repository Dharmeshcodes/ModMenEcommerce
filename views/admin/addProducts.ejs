<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Add Product - MODMEN Admin</title>
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" crossorigin="anonymous" />
  <style>
    body { background: #f7f7fa; font-family: "Inter", Arial, sans-serif; }
    .container-fluid-custom { display: flex; width: 100%; min-height: 100vh; }
    .main-content { flex: 1; padding: 32px 24px; background: #f7f7fa; min-height: 100vh; }
    .card { background: #fff; box-shadow: 0 2px 12px rgba(40, 40, 60, 0.07); border: none; border-radius: 22px; padding: 32px 26px 30px; margin-bottom: 24px; position: relative; z-index: 1; }
    .card-header { font-size: 1.2rem; font-weight: 600; padding: 0; margin-bottom: 22px; color: #18191f; }
    .fabric-row { display: flex; align-items: center; gap: 14px; margin-bottom: 14px; justify-content: space-between; }
    .fabric-row .form-label { margin-left: 2px; font-size: 1.05rem; }
    .fabric-row .form-control { min-width: 130px; max-width: 210px; margin-right: 10px; }
    .fabric-row .badge { font-size: 0.99rem; font-weight: 500; border-radius: 6px; padding: 6px 19px; background: #e6eaf7; color: #20327a; cursor: pointer; }
    .fabric-row .badge.selected { background: #2563eb; color: #fff; }
    .badge-container { display: flex; gap: 7px; }
    .image-upload-container { max-width: 620px; margin: 12px auto 24px auto; background: #fff; border-radius: 18px; box-shadow: 0 2px 14px #0002; padding: 28px 26px 18px 26px; display: flex; flex-direction: column; align-items: center; position: relative; z-index: 2; }
    .main-photo-area { width: 96%; margin-bottom: 18px; border: 2px dashed #d4dbed; border-radius: 12px; background: #f6f8fe; min-height: 180px; display: flex; flex-direction: column; align-items: center; justify-content: center; position: relative; padding: 21px 0; box-sizing: border-box; }
    .main-photo-area img { max-width: 94%; height: 150px; object-fit: cover; border-radius: 6px; background: #e8ecf6; margin-bottom: 12px; }
    .img-btn { background: #2563eb; color: #fff; border: none; padding: 6px 26px; border-radius: 6px; font-size: 1rem; margin-bottom: 2px; cursor: pointer; }
    .img-btn:hover { background: #163dae; }
    .additional-images-row { display: flex; gap: 22px; margin-top: 6px; justify-content: center; }
    .additional-images-row img { width: 170px; height: 140px; object-fit: cover; border-radius: 6px; background: #e8ecf6; }
    @media (max-width: 900px) { .image-upload-container { padding: 9px 8px 10px 8px; } .main-photo-area, .additional-images-row img { height: 90px; } .additional-images-row img { width: 110px; height: 75px; } }
    @media (max-width: 600px) { .additional-images-row { flex-direction: column; gap: 12px; } .image-upload-container { padding: 6px 2px 3px 2px; } }
    .cropper-modal { display: none; position: fixed; z-index: 9999; left: 0; top: 0; width: 100vw; height: 100vh; background: rgba(0, 0, 0, 0.46); align-items: center; justify-content: center; }
    .cropper-modal.d-flex { display: flex; }
    .cropper-modal-content { background: #fff; border-radius: 14px; padding: 32px 24px; min-width: 400px; box-shadow: 0 4px 18px #39477c49; max-width: 94vw; user-select: none; }
    .cropper-modal-close { position: absolute; right: 20px; top: 18px; font-size: 2rem; color: #333; cursor: pointer; }
    #cropBox { resize: both; overflow: auto; min-width: 70px; min-height: 70px; box-sizing: border-box; border-radius: 6px; user-select: none; border: 2px solid #2563eb; box-shadow: 0 0 0 999px rgba(0, 0, 0, 0.3) inset; position: absolute; cursor: move; }
  </style>
</head>
<body>
  <%- include('../partials/admin/header') %>
  <div class="container-fluid-custom">
    <%- include('../partials/admin/sidebar') %>
    <div class="main-content">
      <form id="addProductForm" method="POST" enctype="multipart/form-data">
        <div class="card mb-4">
          <div class="card-header">General Information</div>
          <div class="card-body">
            <div class="mb-3">
              <label for="productName" class="form-label">Product Name</label>
              <input type="text" class="form-control" id="productName" name="name" placeholder="Type product name here . . ." required />
            </div>
            <div class="mb-3">
              <label for="description" class="form-label">Description</label>
              <textarea class="form-control" id="description" name="description" rows="4" required placeholder="Product description..."></textarea>
            </div>
            <div class="fabric-row mb-3 align-items-center">
              <span class="form-label me-2">Tags</span>
              <input type="text" class="form-control me-2" id="tagsInput" name="tags" placeholder="Comma separated tags, e.g. cotton,slim-fit,casual" />
              <div class="badge-container ms-auto">
                <span id="listStatus" class="badge selected">Listed</span>
                <span id="unlistStatus" class="badge">Unlisted</span>
              </div>
            </div>
          </div>
        </div>
        <div class="image-upload-container mb-4">
          <div class="fw-bold text-center mb-2">Add Product Images</div>
          <div class="main-photo-area" id="mainImageZone">
            <img id="mainImagePreview" src="https://dummyimage.com/300x150/ededed/888888.jpg&text=No+Image" alt="Main Photo" />
          </div>
          <div class="additional-images-row">
            <img id="addImagePreview1" src="https://dummyimage.com/120x90/ededed/888888.jpg&text=No+Image" alt="Additional Image 1" />
            <img id="addImagePreview2" src="https://dummyimage.com/120x90/ededed/888888.jpg&text=No+Image" alt="Additional Image 2" />
          </div>
          <input type="file" id="productImagesInput" name="images" multiple accept="image/*" style="display:none;" required />
          <div style="margin-top:10px;">
            <button type="button" class="img-btn" onclick="document.getElementById('productImagesInput').click();">Add Images</button>
          </div>
        </div>
        <div class="card mb-4 pt-3 pb-2">
          <div class="row g-5 align-items-start">
            <div class="col-md-6">
              <div class="mb-3">
                <label for="categoryId" class="form-label">Select Category</label>
                <select class="form-select" id="categoryId" name="categoryId" required>
                  <option value="">-- Select Category --</option>
                  <% categories.forEach(function(cat) { %>
                    <option value="<%= cat._id.toString() %>"><%= cat.name %></option>
                  <% }); %>
                </select>
              </div>
              <div class="mb-3">
                <label for="subcategory" class="form-label">Select Subcategory</label>
                <select class="form-select" id="subcategory" name="subCategoryId" required disabled>
                  <option value="">-- Select Subcategory --</option>
                  <% subcategories.forEach(function(sub) { %>
                    <option value="<%= sub._id.toString() %>" data-category-id="<%= sub.category ? sub.category.toString() : '' %>"><%= sub.name %></option>
                  <% }); %>
                </select>
              </div>
              <div class="mb-3">
                <label for="color" class="form-label">Color</label>
                <input type="text" class="form-control" id="color" name="color" placeholder="sky blue" required />
              </div>
              <div class="mb-3">
                <label for="sku" class="form-label">SKU (auto-generated)</label>
                <input type="text" class="form-control" id="sku" name="sku" readonly />
              </div>
            </div>
            <div class="col-md-6 pb-2">
              <label class="form-label d-block mb-3">Size, Qty & Price</label>
              <% const sizes = ["S", "M", "L", "XL"]; %>
              <% for (let i = 0; i < sizes.length; i++) { %>
                <div class="variant-row mb-2">
                  <label class="me-2"><%= sizes[i] %></label>
                  <input type="number" name="variantQuantity[]" placeholder="Qty" min="1" required class="me-2" />
                  <input type="number" name="variantPrice[]" placeholder="Price" min="0.01" step="0.01" required />
                </div>
              <% } %>
            </div>
          </div>
        </div>
        <div class="card spec-card mb-4">
          <div class="card-header">Product Specifications</div>
          <div class="card-body">
            <div class="mb-3">
              <label for="fitType" class="form-label">Fit type</label>
              <input type="text" class="form-control" name="fitType" id="fitType" placeholder="Type fit, e.g. Slim, Regular" required />
            </div>
            <div class="mb-3">
              <label for="washCare" class="form-label">Wash Care</label>
              <input type="text" class="form-control" id="washCare" name="washCare" value="Machine Wash" />
            </div>
            <div class="mb-3">
              <label for="additionalInfo" class="form-label">Additional informations</label>
              <textarea class="form-control" id="additionalInfo" name="additionalInfo" rows="3" placeholder="casual wear, college wear&#10;Stripes&#10;button down&#10;100% cotton&#10;Full sleeves"></textarea>
            </div>
          </div>
        </div>
        <div class="action-buttons mb-4 d-flex justify-content-center gap-3">
          <button type="submit" class="btn add-product-btn btn-primary">
            ADD PRODUCT
            <div class="loading-spinner" id="loadingSpinner" style="display:none"></div>
          </button>
          <button type="button" class="btn cancel-btn btn-secondary" onclick="window.location.href='/admin/products'">CANCEL</button>
        </div>
      </form>
    </div>
  </div>

  <!-- Cropper Modal -->
  <div id="cropperModal" class="cropper-modal">
    <div class="cropper-modal-content position-relative">
      <span class="cropper-modal-close" id="cropperModalClose">&times;</span>
      <h4 class="mb-3 text-center">Crop Image</h4>
      <div style="width:350px; height:350px; position:relative; background:#fafaff; margin:auto; overflow:hidden;">
        <img id="imageToCrop" style="display:block; max-width:none; position:absolute; left:0; top:0;" />
        <div id="cropBox"></div>
      </div>
      <div class="cropper-controls mt-4 text-center">
        <button id="cropImageBtn" type="button" class="btn btn-success me-3">Crop & Add Image</button>
        <button id="cancelCropBtn" type="button" class="btn btn-secondary">Cancel</button>
      </div>
    </div>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" crossorigin="anonymous"></script>
  <script>
    // Subcategory filtering logic
    const categorySelect = document.getElementById("categoryId");
    const subcategorySelect = document.getElementById("subcategory");

    function filterSubcategories() {
      const selectedId = categorySelect.value;
      let hasAny = false;
      Array.from(subcategorySelect.options).forEach((option, idx) => {
        if (idx === 0) {
          option.style.display = '';
          return;
        }
        const catIdAttr = option.getAttribute('data-category-id') || '';
        if (selectedId && catIdAttr === selectedId) {
          option.style.display = '';
          hasAny = true;
        } else {
          option.style.display = 'none';
        }
      });
      subcategorySelect.value = ''; // reset
      subcategorySelect.disabled = !hasAny;
    }

    categorySelect.addEventListener("change", filterSubcategories);
    filterSubcategories();

    // Badge toggling
    const listBadge = document.getElementById("listStatus");
    const unlistBadge = document.getElementById("unlistStatus");
    listBadge.classList.add("selected");
    listBadge.addEventListener("click", function () {
      listBadge.classList.add("selected");
      unlistBadge.classList.remove("selected");
    });
    unlistBadge.addEventListener("click", function () {
      unlistBadge.classList.add("selected");
      listBadge.classList.remove("selected");
    });

    // Cropping JS logic: (use your existing code here or previous detailed cropper code)
    const productImagesInput = document.getElementById('productImagesInput');
const imagesPreviews = ['mainImagePreview', 'addImagePreview1', 'addImagePreview2'];
let croppedImagesDataURLs = [];
let fileList = [];
let cropIndex = 0;

productImagesInput.addEventListener('change', function (e) {
  fileList = Array.from(e.target.files);
  if (fileList.length !== 3) {
    alert("Please select exactly 3 images.");
    productImagesInput.value = "";
    return;
  }
  croppedImagesDataURLs = [];
  cropIndex = 0;
  processImage(cropIndex);
});

function processImage(index) {
  if (index >= fileList.length || index >= 3) {
    // Replace input files with cropped blobs for upload
    productImagesInput.files = createFileListFromDataURLs(croppedImagesDataURLs);
    return;
  }
  const reader = new FileReader();
  reader.onload = function (ev) {
    openCropperModal(ev.target.result, imagesPreviews[index]);
  };
  reader.readAsDataURL(fileList[index]);
}

    // -------- Cropper Modal Logic --------
    let cropperPreviewId = "";
    let origImgW = 0, origImgH = 0, scaleToFit = 1;
    const cropperModal = document.getElementById("cropperModal");
    const imageToCrop = document.getElementById("imageToCrop");
    const cropBox = document.getElementById("cropBox");

    function openCropperModal(imageSrc, previewId) {
      cropperModal.classList.add("d-flex");
      imageToCrop.src = imageSrc;
      cropperPreviewId = previewId;
      imageToCrop.onload = function () {
        origImgW = imageToCrop.naturalWidth;
        origImgH = imageToCrop.naturalHeight;
        let dispW = origImgW, dispH = origImgH;
        scaleToFit = Math.min(350 / dispW, 350 / dispH, 1);
        dispW = origImgW * scaleToFit;
        dispH = origImgH * scaleToFit;
        imageToCrop.style.width = dispW + "px";
        imageToCrop.style.height = dispH + "px";
        imageToCrop.style.left = ((350 - dispW) / 2) + "px";
        imageToCrop.style.top = ((350 - dispH) / 2) + "px";
        cropBox.style.left = "75px";
        cropBox.style.top = "75px";
        cropBox.style.width = "200px";
        cropBox.style.height = "200px";
      }
    }
    function closeCropperModal() {
      cropperModal.classList.remove("d-flex");
      imageToCrop.src = "";
      cropperPreviewId = "";
    }
    document.getElementById("cropperModalClose").onclick =
    document.getElementById("cancelCropBtn").onclick = closeCropperModal;

    // Drag & Resize Logic
    let dragging = false, dragOffset = { x: 0, y: 0 };
    cropBox.onmousedown = function (e) {
      dragging = true;
      dragOffset.x = e.clientX - cropBox.offsetLeft;
      dragOffset.y = e.clientY - cropBox.offsetTop;
      e.preventDefault();
    };
    document.addEventListener("mousemove", function (e) {
      if (!dragging) return;
      let x = e.clientX - dragOffset.x;
      let y = e.clientY - dragOffset.y;
      x = Math.max(0, Math.min(x, 350 - cropBox.offsetWidth));
      y = Math.max(0, Math.min(y, 350 - cropBox.offsetHeight));
      cropBox.style.left = x + "px";
      cropBox.style.top = y + "px";
    });
    document.addEventListener("mouseup", function () {
      dragging = false;
      resizing = false;
    });
    let resizing = false, resizeStart = {};
    cropBox.addEventListener("mousedown", function (e) {
      const rect = cropBox.getBoundingClientRect();
      if (e.clientX > rect.right - 12 && e.clientY > rect.bottom - 12) {
        resizing = true;
        resizeStart = { x: e.clientX, y: e.clientY, w: cropBox.offsetWidth, h: cropBox.offsetHeight };
        e.preventDefault();
        e.stopPropagation();
      }
    });
    document.addEventListener("mousemove", function (e) {
      if (!resizing) return;
      let newSize = Math.max(70, resizeStart.w + (e.clientX - resizeStart.x));
      newSize = Math.min(newSize, 350 - cropBox.offsetLeft, 350 - cropBox.offsetTop);
      cropBox.style.width = newSize + "px";
      cropBox.style.height = newSize + "px";
    });
    cropBox.style.cursor = "move";
    cropBox.addEventListener("mousemove", function (e) {
      const rect = cropBox.getBoundingClientRect();
      if (e.clientX > rect.right - 12 && e.clientY > rect.bottom - 12) {
        cropBox.style.cursor = "nwse-resize";
      } else {
        cropBox.style.cursor = "move";
      }
    });

    // --- Crop and Preview Logic ---
    document.getElementById("cropImageBtn").onclick = function () {
      let boxLeft = cropBox.offsetLeft;
      let boxTop = cropBox.offsetTop;
      let boxW = cropBox.offsetWidth;
      let boxH = cropBox.offsetHeight;
      let imgLeft = parseFloat(imageToCrop.style.left);
      let imgTop = parseFloat(imageToCrop.style.top);

      let cropX = (boxLeft - imgLeft) / scaleToFit;
      let cropY = (boxTop - imgTop) / scaleToFit;
      let cropWidth = boxW / scaleToFit;
      let cropHeight = boxH / scaleToFit;

      cropX = Math.max(0, cropX);
      cropY = Math.max(0, cropY);
      if (cropX + cropWidth > origImgW) cropWidth = origImgW - cropX;
      if (cropY + cropHeight > origImgH) cropHeight = origImgH - cropY;

      let canvas = document.createElement("canvas");
      canvas.width = 300;
      canvas.height = 300;
      let ctx = canvas.getContext("2d");
      ctx.fillStyle = "#fff";
      ctx.fillRect(0, 0, canvas.width, canvas.height);
      ctx.drawImage(imageToCrop, cropX, cropY, cropWidth, cropHeight, 0, 0, 300, 300);

      const dataURL = canvas.toDataURL("image/png");
      croppedImagesDataURLs[cropIndex] = dataURL;

      document.getElementById(imagesPreviews[cropIndex]).src = dataURL;

      closeCropperModal();
      cropIndex++;
      if (cropIndex < Math.min(fileList.length, 3)) {
        processImage(cropIndex);
      }
    };

    function createFileListFromDataURLs(dataURLs) {
      const files = dataURLs.map((dataURL, i) => {
        const arr = dataURL.split(',');
        const mime = arr[0].match(/:(.*?);/);
        const bstr = atob(arr);
        let n = bstr.length;
        const u8arr = new Uint8Array(n);
        while (n--) { u8arr[n] = bstr.charCodeAt(n); }
        return new File([u8arr], `cropped_image_${i+1}.png`, { type: mime });
      });
      const dataTransfer = new DataTransfer();
      files.forEach(file => dataTransfer.items.add(file));
      return dataTransfer.files;
    }
  </script>
</body>
</html>
